# Bryan Jensen
# April 12, 2014
#
# Description:  
#
# Input:        
#
# Output:       



# Stack Set-Up:
#       sp      fp      use             typically
#       --      --      ---             ---------
# sp -> 0       -28     empty
#       4       -24     empty
#       8       -20     fp              $fp
#       12      -16     ra              $ra
#       16      -12     local0          $a0
#       20      -8      local1          $a1
#       24      -4      local2
# fp -> 28      -0      local3

# Caller's stack:
# oldsp 32       4

        .data
prompt: .asciiz "Enter how far in the fibonacci sequence to go: "
# Array of length 45, filled with sentinel value
memo:   .word   -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
fin:    .asciiz "\n\nFinished. Bye."
endl:   .asciiz "\n"

        .text
        .globl main
main:
        j       after_reset

        li      $t0, 0                  # Start index
        li      $t2, 44                 # End index

reset_loop:
        beq     $t0, $t2, after_reset   # If start == end, jump to after loop

        sll     $t1, $t0, 2             # $t1 is the index multiplied by 4 (for memory "word" accessing)
        sw      $zero, memo($t1)        # Set the array at $t1 (aka at $t0) to 0

        addu    $t0, $t0, 1             # Increment array index

        j       reset_loop              # Jump back to loop

after_reset:
        li      $v0, 4                  # 4 - Print string
        la      $a0, prompt             # Load in the "Enter a value" prompt
        syscall                         # Print out the prompt

        li      $v0, 5                  # 5 - Read integer
        syscall                         # Read in the integer, n, for how many fibonacci numbers
        move    $a0, $v0                # Move the input number as the first argument to 'fib' procedure call

        la      $a1, memo               # Load in the memo array as second argument
        jal     fib                     # Call 'fib' procedure

        move    $t0, $v0                # Move the answer (nth fibonacci number) to $t0

        li      $v0, 1                  # 1 - Print integer
        move    $a0, $t0                # Load in the nth fibonacci number
        syscall                         # Print out the answer

done:
        li      $v0, 4                  # 4 - Print string
        la      $a0, fin                # Load goodbye prompt
        syscall                         # Print out prompt
        
        li      $v0, 10                 # 10 - Exit
        syscall                         # Exit the system

# -------------------------------------------------------------------- #

# Procedure: fibRecur

# Purpose:
# Parameters:
# Returns:

        .data

        .text
fibRecur:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 12($sp)            # Save the old return address
        sw      $fp, 8($sp)             # Save the old frame pointer
        addu    $fp, $sp, 28            # Set frame pointer to new location relative to stack pointer

        li      $t0, -1                 # Load in the sentinel value for an un-memoized value
        sll     $t2, $a0, 2             # Index into memo array is the argument $a0 * 4
        add     $t2, $t2, $a1           # Manually perform array pointer addition into memo array
        lw      $t1, 0($t2)             # Load in the memoized value

        beq     $t0, $t1, calcFib       # If the memoized array value is the sentinel, the value hasn't been memoized

        j       loadFib

calcFib:
        sw      $a0, -12($fp)           # Store the first argument
        sw      $a1, -8($fp)            # Store the second argument
        subu    $a0, $a0, 1             # Create first new argument (n-1)
        jal     fibRecur                # F(n-1) - Arguments go in as $a0 and $a1, answer comes back in $v0
        sw      $v0, -4($fp)            # Save the first result in stack

        lw      $a0, -12($fp)           # Grab $a0 from the stack for memo array storage
        subu    $a0, $a0, 1             # $a0 = $a0 - 1
        sll     $a0, $a0, 2             # Convert $a0 to a byte offset amount
        add     $a0, $a0, $a1           # Manually perform array pointer addition into memo array
        sw      $v0, 0($a0)             # Store the first result into the memo array for later

        lw      $a0, -12($fp)           # Replace the (possibly) altered a0 with the stack-stored one
        lw      $a1, -8($fp)            # Replace the (possibly) altered a1 with the stack-stored one
        subu    $a0, $a0, 2             # Create next new argument (n-2)
        jal     fibRecur                # F(n-2) - Arguments go in as $a0 and $a1, answer comes back in $v0
        move    $t0, $v0                # Move the second result for addition

        lw      $a0, -12($fp)           # Grab $a0 from the stack for memo array storage
        subu    $a0, $a0, 2             # $a0 = $a0 - 2
        sll     $a0, $a0, 2             # Convert $a0 to a byte offset amount
        add     $a0, $a0, $a1           # Manually perform array pointer addition into memo array
        sw      $v0, 0($a0)             # Store the second result into the memo array for later

        lw      $t1, -4($fp)            # Load the first result F(n-1) from stack for addition
        add     $v0, $t0, $t1           # Perform the addition of F(n-1) and F(n-2), and put the result in $v0

        j       fibRecur_done
        
loadFib:
        move    $v0, $t1                # Move the loaded fibonacci number from $t1 for returning

        j       fibRecur_done

fibRecur_done:
        lw      $ra, 12($sp)            # Restore old return address value
        lw      $fp, 8($sp)             # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller

# -------------------------------------------------------------------- #

# Procedure: fib

# Purpose:
# Parameters:
# Returns:

        .data

        .text
fib:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 12($sp)            # Save the old return address
        sw      $fp, 8($sp)             # Save the old frame pointer
        addu    $fp, $sp, 28            # Set frame pointer to new location relative to stack pointer

        li      $t0, 0                  # Load in 0 as the F0 in memo array
        addi    $t1, $a1, 0             # Manually perform array offset addition (memo in $a0 + 0 byte offset)
        sw      $t0, 0($t1)             # Store 0 as F0
        li      $t0, 1                  # Load in 1 as the F1 in memo array
        addi    $t1, $a1, 4             # Manually perform array offset addition (memo in $a0 + 4 byte offset)
        sw      $t0, 0($t1)             # Store 1 as F1

        jal     fibRecur

fib_done:
        lw      $ra, 12($sp)            # Restore old return address value
        lw      $fp, 8($sp)             # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller


# Bryan Jensen
# April 3, 2014
#
# Description:  This program simulates a gasoline pump in the "Cowberland Farms" gas station chain,
#               using user input via "hard-coded" buttons on the pump(aka no error checking performed)
#               and a value for the number of gallons to print out a full receipt of the purchase.
#
# Input:        This program takes in two characters from the keyboard, simulating two button-based choices
#               where the buttons would be present on the pump. The first choice is the type of payment, either
#               credit card or the Cowberland Farms "SmahtPay" app system. The second choice is the type of gas
#               to pump, either regular, plus or super (all unleaded, of course). The third input is a floating point
#               value for the number of gallons to pump.
#
# Output:       A fully formatted receipt, echoing back the user's input along with additional information typically
#               found on gas station recepts, such as location, time, date (all simulated), along with useful information
#               such as the total cost of the purchase, what discount was gained, etc.


        .data

fin:    .asciiz "\n\nPump deactivated. G'day."
endl:   .asciiz "\n"

        .text
        .globl main
main:
        # s0 - s3 are global "word" variables for gas information
        # f4 - f8 are global float variables for gas information

        # Global variables:
        # s0: Type of gas
        # s1: Type of payment
        # f4: Amount of gas
        # f5: Initial price of gas/gal
        # f6: Discount (from SmahtPay)
        # f7: Final price of gas/gal
        # f8: Total cost
        # f9: Amount saved


        jal     uInput                  # Call uInput (user input) procedure

        move    $s0, $v1                # Move the type of gas into the s0 (global) register
        move    $s1, $v0                # Move the type of payment into the s1 (global) register
        mov.s   $f4, $f0                # Move the amount of gas into f4 (global) register

        jal     calcGas                 # Performs all the calculations for the gas receipt

        jal     printReceipt            # Prints the receipt using the values in the global variable registers

        j       main                    # Loop back to beginning

done:
        li      $v0, 4                  # 4 - Print string
        la      $a0, fin                # Load goodbye prompt
        syscall                         # Print out prompt
        
        li      $v0, 10                 # 10 - Exit
        syscall                         # Exit the system


# -------------------------------------------------------------------- #

# Procedure: lowercase

# Purpose: Converts letter in $a0 to lowercase if it wasn't already, or
#          leaves it as is if it was already
# Parameters: One character in $a0 to be converted
# Returns: The same character, guaranteed to be in lowercase, in $v0

        .data

        .text
lowercase:
        li      $t0, 'a'                # Load comparison value
        bgt     $a0, $t0, afterLower    # If value is greater than 'a', letter is lowercase, so skip (branch) over lowercasing the letter

        addi    $a0, 32                 # Otherwise, alter it to be lowercase by adding 32

afterLower:
        move    $v0, $a0                # Move the result to the "return" register
        j       $ra                     # Return to the caller

# -------------------------------------------------------------------- #

# Procedure: uInput

# Purpose: Prompts user for input choices on type of payment, type of gas
#          and amount of gas, and returns their input values to the caller
# Parameters: None
# Returns: The type of payment (char) in $v0, type of gas (char) in $v1 and
#          the amount of gas (float, single) in $f0


        .data

tPay:   .asciiz "\nEnter payment type - (S)mahtPay, (C)redit Card or (Q)uit): "
tGas:   .asciiz "\nEnter type of gas - (R)egular, (P)lus or (S)uper: "
aGas:   .asciiz "\nEnter amount of gas (in gallons) to start pumping: "

        .text
uInput:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 20($sp)            # Save the old return address
        sw      $fp, 16($sp)            # Save the old frame pointer
        addu    $fp, $sp, 28            # Shift frame pointer to new location relative to stack pointer


        li      $v0, 4                  # 4 - Print string
        la      $a0, tPay               # Load type of payment prompt
        syscall                         # Print out prompt

        li      $v0, 12                 # 12 - Read char
        syscall                         # Read in the type of payment - goes into $v0
        move    $a0, $v0                # Move the resultant char into $a0 as an argument for call to lowercase

        jal     lowercase               # Call lowercase procedure on first input character
        move    $t2, $v0                # Move the result of the call from $v0 into $t2

        li      $v0, 'q'                # Load in sentinel value for quitting
        beq     $t2, $v0, done          # If equal to the sentinel, goto done

        li      $v0, 4                  # 4 - Print string
        la      $a0, tGas               # Load type of gas prompt
        syscall                         # Print out prompt

        li      $v0, 12                 # 12 - Read char
        syscall                         # Read in the type of gas - goes into $v0
        move    $a0, $v0                # Move the resultant char into $a0 as an argument for call to lowercase

        jal     lowercase               # Call lowercase procedure on second input character
        move    $t3, $v0                # Move the result of the call from $v0 into $t3

        li      $v0, 4                  # 4 - Print string
        la      $a0, aGas               # Load in amount of gas prompt
        syscall                         # Print out prompt

        li      $v0, 6                  # 6 - Read float
        syscall                         # Read float into $f0
        # Don't move - Leave result in $f0

        move    $v0, $t2                # Move return value for type of payment into $v0
        move    $v1, $t3                # Move return value for type of gas into $v1


inputDone:
        lw      $ra, 20($sp)            # Restore old return address value
        lw      $fp, 16($sp)            # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller

# -------------------------------------------------------------------- #

# Procedure: calcGas

# Purpose: Calculates the gas price based on the values (characters) in global variable
#          registers representing the type of payment and type of gas, and the amount 
#          of gas input. Puts the altered values back into the global registers. 
# Parameters: None (instead accesses global values in s0 (gas type), s1 (payment type), 
#             f4 (number of gallons), f5 (price/gallon), f6 (discount), f7 (final price/gallon) and f8 (total cost))
# Returns: Nothing


        .data

        .text
calcGas:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 20($sp)            # Save the old return address
        sw      $fp, 16($sp)            # Save the old frame pointer
        addu    $fp, $sp, 28            # Shift frame pointer to new location relative to stack pointer


        li      $t0, 'r'                # Load the comparison value - testing for regular gas
        beq     $t0, $s0, regular       # If the argument char for type of gas is equal -> jump

        li      $t0, 'p'                # Load the comparison value - testing for plus gas
        beq     $t0, $s0, plus          # If the argument char for type of gas is equal -> jump
        
        li      $t0, 's'                # Load the comparison value - testing for super gas
        beq     $t0, $s0, super         # If the argument char for type of gas is equal -> jump

regular:
        li.s    $f5, 3.619              # Load regular gas price/gal
        j       afterType

plus:
        li.s    $f5, 3.719              # Load plus gas price/gal
        j       afterType

super:
        li.s    $f5, 3.839              # Load super gas price/gal
        j       afterType


afterType:
        li.s    $f6, 0.000              # Load the discount value as the default of 0.00

        li      $t0, 's'                # Load the comparison value - testing for SmahtPay
        bne     $t0, $s1, calcGasDone   # If payment type is not SmahtPay, jump to after discount subtraction

        li.s    $f6, 0.100              # Load the discount value for SmahtPay


calcGasDone:
        sub.s   $f7, $f5, $f6           # Take off the discount amount from the price/gal

        mul.s   $f8, $f4, $f7           # Multiply the price/gal (f7) by the amount of gas (f4) to get total cost
        mul.s   $f9, $f6, $f4           # Multiply the discount (f6) by the amount of gas (f4) to get full discount

        lw      $ra, 20($sp)            # Restore old return address value
        lw      $fp, 16($sp)            # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller

# -------------------------------------------------------------------- #

# Procedure: moneyPrint

# Purpose: Takes in a (single precision) floating point value (in $f12) and prints out the
#          value rounded down to the hundredth (a.k.a. to the penny)
# Parameters: Floating point to print out in $f12, and whether or not (boolean) to include
#             the thousandth digit (useful for printing gas price) in $a0
# Returns: None

        .data
dPoint: .asciiz "."

        .text
moneyPrint:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 20($sp)            # Save the old return address
        sw      $fp, 16($sp)            # Save the old frame pointer
        addu    $fp, $sp, 28            # Shift frame pointer to new location relative to stack pointer

        mov.s   $f10, $f12              # Move the float used for formatted printing to a more convienent register
        move    $t0, $a0                # Move the boolean (signifying rounding precision) to a more convienent register

        beq     $t0, $zero, hundredth   # If the boolean argument of rounding is zero (aka false): round to hundredth
                                        #                                        Otherwise (true): round to thousandth

thousandth:
        li.s    $f1, 1000.0             # Set shift amount to 1000 (for later truncation)
        li.s    $f2, 0.0005             # Load in the rounding-shift amount (so that truncation results in a correctly rounded value)
        j       afterRoundIf

hundredth:
        li.s    $f1, 100.0              # Set shift amount to 100 (for later truncation)
        li.s    $f2, 0.005              # Load in the rounding-shift amount (so that truncation results in a correctly rounded value)
        j       afterRoundIf

afterRoundIf:
        add.s   $f10, $f10, $f2         # Add the rounding-shift

        mov.s   $f12, $f10              # Load the float value into argument register for truncFloat
        jal     truncFloat              # Truncate the value in $f12, result in $v0
        move    $t1, $v0                # Move the result to $t1

        mtc1    $t1, $f0                # Convert the integer in $t1 to a float in $f0
        cvt.s.w $f0, $f0                # Convert the "word" fl. pt. representation of $f0 into a "single" fl. pt. representation

        sub.s   $f0, $f10, $f0          # Subtract away the integer portion of the value (leaving only the decimal)

        li      $t2, 0                  # $t2 is the number of leading zeros to pad the decimal with (assume none to start with)

        beq     $t0, $zero, hund_Opts   # If only rounding to hundreds (aka the nearest penny) jump to that option section
        j       thou_Opts               # Otherwise, jump to thousands option section

hund_Opts:                              # If rounding to hundred, need to test against certain values for padding with zeros
        li.s    $f2, 0.01               # First test if less than 0.01
        c.lt.s  $f0, $f2                # If the value is less than 0.01, then display is simply going to be a 0, so pad with 1 zero
        bc1t    oneLeadZero             # Jump to setting of "padding" with 1 zero

        li.s    $f2, 0.1                # Then test if less than 0.1
        c.lt.s  $f0, $f2                # If the value is less than 0.1, then display is simply going to be a single digit, so again pad with 1 zero
        bc1t    oneLeadZero             # Jump to setting of "padding" with 1 zero

        j       afterLeadZero           # Otherwise, just jump to padding loop, leaving "padding" value with 0 zeros (the default setting)

thou_Opts:                              # If rounding to thousand, need to test against certain values for padding with zeros
        li.s    $f2, 0.001              # First test if less than 0.001
        c.lt.s  $f0, $f2                # If the value is less than 0.001, then display is simply going to be a 0, so pad with 2 zeros
        bc1t    twoLeadZeros            # Jump to setting of "padding" with 2 zeros

        li.s    $f2, 0.01               # Then test if less than 0.01
        c.lt.s  $f0, $f2                # If the value is less than 0.01, then display is simply going to be a single digit, so again pad with 2 zeros
        bc1t    twoLeadZeros            # Jump to setting of "padding" with 2 zeros

        li.s    $f2, 0.1                # Then test if less than 0.1
        c.lt.s  $f0, $f2                # If the value is less than 0.1, then display is going to be 2 digits, so pad with 1 zero
        bc1t    oneLeadZero             # Jump to setting of "padding" with 1 zero

        j       afterLeadZero           # Otherwise, just jump to padding loop, leaving "padding" value with 0 zeros (the default setting)

oneLeadZero:
        li      $t2, 1                  # $t2 holds the number of zeros to pad with - pad with 1
        j       afterLeadZero           # Jump to after all the calculations

twoLeadZeros:
        li      $t2, 2                  # $t2 holds the number of zeros to pad with - pad with 2
        j       afterLeadZero           # Jump to after all the calculations

afterLeadZero:
        mul.s   $f0, $f0, $f1           # Multiply the float by the shift amount (in base 10)

        mov.s   $f12, $f0               # Move the result to $f12 (as an argument to truncFloat)
        jal     truncFloat              # Truncate the rounded shifted decimal value
        move    $t0, $v0                # Move the result to be an argument to the "Print integer" below

        li      $v0, 1                  # 1 - Print integer
        move    $a0, $t1                # Load the result from the first truncation
        syscall                         # Print the integer

        li      $v0, 4                  # 4 - Print string
        la      $a0, dPoint             # Load the decimal point
        syscall                         # Print the point


lZeroLoop:                              # Loop for padding number with zeros
        beq     $t2, $zero, lZeroLoop_done # If number of zeros to pad with is 0, then done

        li      $v0, 1                  # 1 - Print integer
        li      $a0, 0                  # Load in 0 to print out
        syscall                         # Print a "padding" 0

        subu    $t2, $t2, 1             # Decrement number of "padding" zeros remaining

        j       lZeroLoop               # Return to top of loop

lZeroLoop_done:                         # Outside of padding zero loop

        li      $v0, 1                  # 1 - Print integer
        move    $a0, $t0                # Load the result from the second truncation
        syscall                         # Print the truncated decimal portion, now represented as an integer

        lw      $ra, 20($sp)            # Restore old return address value
        lw      $fp, 16($sp)            # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller


# -------------------------------------------------------------------- #

# Procedure: truncFloat

# Purpose: Takes in a single precision floating point and truncates it to an integer
# Parameters: Floating point to truncate in $f12
# Returns: Integer representation of that floating point in $v0

        .data

        .text
truncFloat:
        cvt.w.s $f12, $f12              # Convert the single precision float into a word, still in $f register
        mfc1    $v0, $f12               # Move the floating point into a "word" return register

        j       $ra                     # Return to caller

# -------------------------------------------------------------------- #

# Procedure: printReceipt

# Purpose: Prints out the gas pump receipt based on the passed in values - price/gal in $f12 and
#          amount of gas (in gallons) in $f13 - formatted nicely and rounded to the correct number
#          of decimal places for monetary transactions (a.k.a. rounded to the penny)
# Parameters: None (instead accesses global values in s0 (gas type), s1 (payment type), 
#             f4 (number of gallons), f5 (price/gallon), f6 (discount), f7 (final price/gallon) and f8 (total cost))
# Returns: Nothing
        .data
bar:    .asciiz "\n\n\n----------------------------------------\n\n"
header: .asciiz "\n              Welcome to\n           COWBERLAND FARMS\n          Paris, Maine 04281\n           1 (28A) 186-0296\n"
info:   .asciiz "\n\n   02/30/2016               23:11:11\n\n   PUMP                           3E\n   INVOICE                  0x2F435B"
gal:    .asciiz "\n   GALLONS                "
prod_R: .asciiz "\n   PRODUCT                   REGULAR"
prod_P: .asciiz "\n   PRODUCT                      PLUS"
prod_S: .asciiz "\n   PRODUCT                     SUPER"
iPrice: .asciiz "\n   FULL PRICE/GAL             $"
disc:   .asciiz "\n   DISCOUNT                   $"
fPrice: .asciiz "\n   YOUR PRICE/GAL             $"
cost:   .asciiz "\n\n   TOTAL COST                  $"
tDisc:  .asciiz "\n   YOU SAVED                   $"
sPay:   .asciiz "\n\n   PAID WITH:               SmahtPay"
cCard:  .asciiz "\n\n   PAID WITH:            Credit Card"
paid:   .asciiz "\n\n   AMOUNT TENDERED             $"
change: .asciiz "\n   CHANGE DUE                  $"
footer: .asciiz "\n\n\n       Thank you for your money!\n     Please give us some more soon!\n"

        .text
printReceipt:
        subu    $sp, $sp, 32            # Shift stack pointer to new location
        sw      $ra, 20($sp)            # Save the old return address
        sw      $fp, 16($sp)            # Save the old frame pointer
        addu    $fp, $sp, 28            # Shift frame pointer to new location relative to stack pointer

        li      $v0, 4                  # 4 - Print string
        la      $a0, bar                # Load in the bar of dashes
        syscall                         # Print out the string

        li      $v0, 4                  # 4 - Print string
        la      $a0, header             # Load in the header info (all the gas station jargon)
        syscall                         # Print out the header

        li      $v0, 4                  # 4 - Print string
        la      $a0, info               # Load in the other info (time, date, pump #, etc.)
        syscall                         # Print out the info


        li      $t0, 'r'
        beq     $s0, $t0, regGas
        li      $t0, 'p'
        beq     $s0, $t0, plusGas
        j       superGas

regGas:
        li      $v0, 4                  # 4 - Print string
        la      $a0, prod_R             # Load in the gas type: regular label string
        syscall                         # Print out the label

        j       iPriceGal

plusGas:
        li      $v0, 4                  # 4 - Print string
        la      $a0, prod_P             # Load in the gas type: plus label string
        syscall                         # Print out the label
        
        j       iPriceGal

superGas:
        li      $v0, 4                  # 4 - Print string
        la      $a0, prod_S             # Load in the gas type: super label string
        syscall                         # Print out the label
        
        j       iPriceGal


iPriceGal:
        # Initial price / gal
        li      $v0, 4                  # 4 - Print string
        la      $a0, iPrice             # Load in the price label string
        syscall                         # Print out the price label

        li      $a0, 1                  # Load in 1 as the first "word" argument to moneyPrint (signifies rounding to 1000th instead of 100th)
        mov.s   $f12, $f5               # Load in initial price/gal as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the price/gal with nice formatting


        # Discount
        li      $v0, 4                  # 4 - Print string
        la      $a0, disc               # Load in the discount label string
        syscall                         # Print out the discount label

        li      $a0, 1                  # Load in 1 as the first "word" argument to moneyPrint (signifies rounding to 1000th instead of 100th)
        mov.s   $f12, $f6               # Load in discount as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the discount with nice formatting


        # Final price / gal
        li      $v0, 4                  # 4 - Print string
        la      $a0, fPrice             # Load in the price label string
        syscall                         # Print out the price label

        li      $a0, 1                  # Load in 1 as the first "word" argument to moneyPrint (signifies rounding to 1000th instead of 100th)
        mov.s   $f12, $f7               # Load in final price/gal as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the price/gal with nice formatting

        # Amount of gas
        li      $v0, 4                  # 4 - Print string
        la      $a0, gal                # Load in the amount of gal (# of gallons) label string
        syscall                         # Print out the gallon amount label

        li      $v0, 2                  # 2 - Print float (single)
        mov.s   $f12, $f4               # Load in the amount of gas
        syscall                         # Print the amount of gas


        # Total cost
        li      $v0, 4                  # 4 - Print string
        la      $a0, cost               # Load in the (total) cost label string
        syscall                         # Print out the label

        li      $a0, 0                  # Load in 0 as the first "word" argument to moneyPrint (signifies rounding to 100th instead of 1000th)
        mov.s   $f12, $f8               # Load in the total price to print out, as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the total price with nice formatting


        # Amount saved (total discount)
        li      $v0, 4                  # 4 - Print string
        la      $a0, tDisc              # Load in the total discount label string
        syscall                         # Print out the label

        li      $a0, 0                  # Load in 0 as the first "word" argument to moneyPrint (signifies rounding to 100th instead of 1000th)
        mov.s   $f12, $f9               # Load in the total discount to print out, as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the total price with nice formatting


        li      $t0, 'c'
        beq     $s1, $t0, cCardPaid    
        j       sPayPaid

cCardPaid:
        li      $v0, 4                  # 4 - Print string
        la      $a0, cCard              # Load in the payment type: credit card label string
        syscall                         # Print out the label

        j       amtPaid

sPayPaid:
        li      $v0, 4                  # 4 - Print string
        la      $a0, sPay               # Load in the payment type: SmahtPay label string
        syscall                         # Print out the label
        
        j       amtPaid


amtPaid:
        # Amount paid
        li      $v0, 4                  # 4 - Print string
        la      $a0, paid               # Load in the amount paid label string
        syscall                         # Print out the label

        li      $a0, 0                  # Load in 0 as the first "word" argument to moneyPrint (signifies rounding to 100th instead of 1000th)
        mov.s   $f12, $f8               # Load in the total price to print out, as first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the total price with nice formatting as the amount "paid"


        # Change due
        li      $v0, 4                  # 4 - Print string
        la      $a0, change             # Load in the change due label string
        syscall                         # Print out the label

        li      $a0, 0                  # Load in 0 as the first "word" argument to moneyPrint (signifies rounding to 100th instead of 1000th)
        li.s    $f12, 0.0               # Load in the "change due" (always 0) as the first fl. pt. argument to moneyPrint
        jal     moneyPrint              # Prints out the change due with nice formatting


        # Footer info
        li      $v0, 4                  # 4 - Print string
        la      $a0, footer             # Load in the footer info (all the "thank you" jargon)
        syscall                         # Print out the footer


        # Ending bar
        li      $v0, 4                  # 4 - Print string
        la      $a0, bar                # Load in the bar of dashes
        syscall                         # Print out the bar


        # Extra endline for good luck
        li      $v0, 4                  # 4 - Print string
        la      $a0, endl               # Load in the endline character
        syscall                         # Print the endline

printReceiptDone:
        lw      $ra, 20($sp)            # Restore old return address value
        lw      $fp, 16($sp)            # Restore old frame pointer
        addu    $sp, $sp, 32            # Shift stack pointer back to old location

        j       $ra                     # Return to caller

